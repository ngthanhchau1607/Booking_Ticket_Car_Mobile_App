import React, { useEffect } from "react";
import * as Notifications from "expo-notifications";
import { Platform } from "react-native";
import { useCurrentApp } from "@/context/api.context";
import { Redirect } from "expo-router";

// ‚öôÔ∏è C·∫•u h√¨nh handler cho th√¥ng b√°o foreground (app ƒëang m·ªü)
Notifications.setNotificationHandler({
  handleNotification: async () => {
    console.log("[Handler] Foreground notification triggered");
    return {
      shouldShowAlert: true,
      shouldPlaySound: true,
      shouldSetBadge: false,
    };
  },
});

const AppRoot = () => {
  const { appState } = useCurrentApp();

  useEffect(() => {
    async function registerForPushNotificationsAsync() {
      console.log("[Init] B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω th√¥ng b√°o...");

      if (Platform.OS === 'android') {
        console.log("[Android] Thi·∫øt l·∫≠p notification channel...");
        await Notifications.setNotificationChannelAsync('default', {
          name: 'default',
          importance: Notifications.AndroidImportance.HIGH,
          sound: 'default',
        });
        console.log("[Android] Channel ƒë√£ t·∫°o xong");
      }

      const { status } = await Notifications.requestPermissionsAsync();
      console.log(`[Permission] Tr·∫°ng th√°i c·∫•p quy·ªÅn: ${status}`);

      if (status !== 'granted') {
        alert('B·∫°n c·∫ßn c·∫•p quy·ªÅn th√¥ng b√°o!');
        return;
      }

      console.log("[Permission] Quy·ªÅn ƒë√£ ƒë∆∞·ª£c c·∫•p");
    }

    registerForPushNotificationsAsync();

    const subscription = Notifications.addNotificationResponseReceivedListener(response => {
      console.log("[Event] Ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi th√¥ng b√°o:", response);
    });

    return () => {
      subscription.remove();
      console.log("[Cleanup] ƒê√£ g·ª° listener notification response");
    };
  }, []);

  useEffect(() => {
    console.log("[AppState] Gi√° tr·ªã appState:", appState);

    if (appState?.user) {
      console.log("[Trigger] Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, s·∫Ω g·ª≠i th√¥ng b√°o sau 1 ph√∫t...");

      const timer = setTimeout(async () => {
        try {
          console.log("[Send] Chu·∫©n b·ªã g·ª≠i th√¥ng b√°o...");
          await Notifications.scheduleNotificationAsync({
            content: {
              title: "üéâ Khuy·∫øn m√£i ƒë·∫∑c bi·ªát!",
              body: "ƒê·∫∑t v√© ngay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i 20% cho chuy·∫øn ƒëi ti·∫øp theo!",
              sound: "default",
            },
            trigger: null,
          });
          console.log("[Send] G·ª≠i th√¥ng b√°o th√†nh c√¥ng!");
        } catch (error) {
          console.error("[Send] L·ªói khi g·ª≠i th√¥ng b√°o:", error);
        }
      },5* 60 * 1000); // 1 ph√∫t

      return () => {
        clearTimeout(timer);
        console.log("[Cleanup] ƒê√£ hu·ª∑ timeout g·ª≠i th√¥ng b√°o");
      };
    } else {
      console.log("[Skip] Kh√¥ng c√≥ user -> kh√¥ng g·ª≠i th√¥ng b√°o");
    }
  }, [appState?.user]);

  if (!appState?.user) {
    console.log("[Redirect] Ch∆∞a c√≥ user, chuy·ªÉn h∆∞·ªõng ƒë·∫øn /welcome");
    return <Redirect href="/(auth)/welcome" />;
  }

  return <></>;
};

export default AppRoot;
