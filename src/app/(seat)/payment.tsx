import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import SeatHeader from "@/components/seat/seat.header";
import { useLocation } from "@/context/search.context";
import { useInfo } from "@/context/info.context";
import { router } from "expo-router";
import { postPayment, checkStatus } from "@/utils/api";
import QRCode from "react-native-qrcode-svg";


const Payment = () => {
  const insets = useSafeAreaInsets();
  const { date } = useLocation();
  const {
    busCompany,
    departureTime,
    departureDate,
    totalPrice,
  } = useInfo(); 



  const activeStep = 6;

  const [qrCodeData, setQrCodeData] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState(600); // 10 ph√∫t
  const [loading, setLoading] = useState(true);

  const handleBackPress = () => {
    router.back();
  };

  const handleCancelTicket = () => {
    Alert.alert("H·ªßy v√©", "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy v√©?", [
      { text: "Kh√¥ng" },
      // { text: "C√≥", onPress: () => router.push("/(seat)/cancel") },
    ]);
  };

  // ƒê·∫øm ng∆∞·ª£c
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // G·ª≠i y√™u c·∫ßu thanh to√°n v√† nh·∫≠n QR
  useEffect(() => {
    const sendPaymentRequest = async () => {
      try {
        setLoading(true);
        const response = await postPayment(totalPrice.toString(), busCompany);
        const qrData = response.data?.qrCode || response.data?.payUrl;
        if (qrData) {
          setQrCodeData(qrData);
          console.log("‚úÖ Nh·∫≠n m√£ QR:", qrData);
        } else {
          console.warn("‚ö† Kh√¥ng c√≥ QR code ho·∫∑c URL trong response");
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi g·ªçi postPayment:", error);
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫°o thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.");
      } finally {
        setLoading(false);
      }
    };

    if (totalPrice && busCompany) {
      sendPaymentRequest();
    }
  }, [totalPrice, busCompany]);

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n t·ª± ƒë·ªông sau m·ªói 5 gi√¢y
  useEffect(() => {
    if (!qrCodeData) return;

    const interval = setInterval(async () => {
      try {
        const response = await checkStatus();
        if (response.data?.isPaid) {
          clearInterval(interval);
          router.push("/success");
        } else {
          console.log("üïê Ch∆∞a thanh to√°n...");
        }
      } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i:", error);
      }
    }, 5000);

    return () => clearInterval(interval);
  }, [qrCodeData]);

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
  };

  return (
    <View style={{ flex: 1 }}>
      <View style={[styles.header, { paddingTop: insets.top }]}>
        <SeatHeader
          busName={busCompany}
          departureTime={departureTime}
          departureDate={departureDate || date}
          activeStep={activeStep}
          onBackPress={handleBackPress}
        />
      </View>

      <View style={styles.content}>
        <Text style={styles.title}>Thanh to√°n MoMo b·∫±ng m√£ QR</Text>

        {loading ? (
          <ActivityIndicator size="large" color="#1e88e5" />
        ) : qrCodeData ? (
          <>
            <QRCode value={qrCodeData} size={220} />
            <Text style={styles.note}>Qu√©t m√£ b·∫±ng MoMo ƒë·ªÉ thanh to√°n</Text>

            <Text style={styles.countdownText}>
              Th·ªùi gian c√≤n l·∫°i: {formatTime(timeLeft)}
            </Text>

            <Text style={styles.paymentText}>
              T·ªïng ti·ªÅn:{" "}
              <Text style={styles.totalPrice}>
                {totalPrice.toLocaleString()} ƒë
              </Text>
            </Text>

            <TouchableOpacity style={styles.cancelButton} onPress={handleCancelTicket}>
              <Text style={styles.buttonText}>H·ªßy v√©</Text>
            </TouchableOpacity>
          </>
        ) : (
          <Text style={styles.note}>Kh√¥ng th·ªÉ hi·ªÉn th·ªã m√£ QR. Vui l√≤ng th·ª≠ l·∫°i.</Text>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  header: {
    backgroundColor: "white",
    paddingHorizontal: 20,
    paddingBottom: 12,
    borderBottomWidth: 2,
    borderBottomColor: "#ddd",
  },
  content: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 24,
    backgroundColor: "#f5f7fa",
  },
  title: {
    fontSize: 20,
    fontWeight: "700",
    marginBottom: 24,
    color: "#333",
    textAlign: "center",
  },
  countdownText: {
    fontSize: 18,
    fontWeight: "700",
    color: "#e53935",
    marginTop: 24,
    marginBottom: 8,
  },
  paymentText: {
    fontSize: 18,
    fontWeight: "500",
    color: "#444",
    marginBottom: 8,
  },
  totalPrice: {
    fontWeight: "700",
    color: "#1e88e5",
  },
  note: {
    fontSize: 14,
    color: "#777",
    marginTop: 12,
    textAlign: "center",
  },
  cancelButton: {
    marginTop: 16,
    backgroundColor: "#e53935",
    paddingVertical: 14,
    paddingHorizontal: 32,
    borderRadius: 8,
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
});

export default Payment;
